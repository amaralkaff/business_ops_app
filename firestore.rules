rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Attendance collection - users can only access their own attendance records
    match /attendance/{attendanceId} {
      allow read, write: if request.auth != null && 
                          request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;
    }
    
    // Requests collection - for goods/cash/leave requests
    match /requests/{requestId} {
      allow read, write: if request.auth != null && 
                          request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;
      
      // Supervisors and admins can read all requests for approval
      allow read: if request.auth != null && 
                  (getUserRole() == 'supervisor' || getUserRole() == 'admin');
      
      // Only supervisors and admins can update request status
      allow update: if request.auth != null && 
                    (getUserRole() == 'supervisor' || getUserRole() == 'admin') &&
                    onlyUpdatingStatus();
    }
    
    // Companies/Organizations collection - read-only for users
    match /companies/{companyId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && getUserRole() == 'admin';
    }
    
    // Reports collection - read access based on role
    match /reports/{reportId} {
      allow read: if request.auth != null && 
                  (getUserRole() == 'supervisor' || getUserRole() == 'admin');
      allow write: if request.auth != null && getUserRole() == 'admin';
    }
    
    // Helper functions
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function onlyUpdatingStatus() {
      return request.resource.data.diff(resource.data).affectedKeys()
             .hasOnly(['status', 'approvedBy', 'approvedAt', 'rejectionReason']);
    }
    
    // Validation functions
    function isValidAttendance() {
      return request.resource.data.keys().hasAll(['userId', 'date', 'status']) &&
             request.resource.data.userId == request.auth.uid;
    }
    
    function isValidRequest() {
      return request.resource.data.keys().hasAll(['userId', 'type', 'title', 'description', 'status']) &&
             request.resource.data.userId == request.auth.uid &&
             request.resource.data.status == 'pending';
    }
  }
}