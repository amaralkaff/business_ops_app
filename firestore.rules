rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to get user role
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/user_roles/$(userId)).data.role;
    }
    
    // Helper function to check if user has role
    function hasRole(role) {
      return request.auth != null && getUserRole(request.auth.uid) == role;
    }
    
    // Helper function to check if user can approve requests
    function canApproveRequests() {
      return request.auth != null && 
             getUserRole(request.auth.uid) in ['supervisor', 'hrd', 'finance'];
    }
    
    // Helper function to check if user can manage users
    function canManageUsers() {
      return request.auth != null && getUserRole(request.auth.uid) == 'hrd';
    }
    
    // User roles collection - Fixed circular dependency
    match /user_roles/{userId} {
      // Users can always read their own role (breaks circular dependency)
      allow read: if request.auth != null && request.auth.uid == userId;
      // HRD can read all user roles for management
      allow read: if request.auth != null && 
                 getUserRole(request.auth.uid) == 'hrd';
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if canManageUsers();
      allow delete: if false; // Never allow deletion
    }
    
    // Attendance records - users can only access their own
    match /attendance/{document=**} {
      allow read, write: if request.auth != null && 
                         request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;
    }
    
    // Requests - users can read their own, approvers can read/update
    match /requests/{requestId} {
      allow read: if request.auth != null && 
                 (request.auth.uid == resource.data.userId || canApproveRequests());
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if canApproveRequests();
      allow delete: if false; // Never allow deletion
    }
    
    // All other documents are denied by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}